// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-study/go-ent-pokemon/ent/battle"
	"go-study/go-ent-pokemon/ent/pokemon"
	"go-study/go-ent-pokemon/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BattleUpdate is the builder for updating Battle entities.
type BattleUpdate struct {
	config
	hooks    []Hook
	mutation *BattleMutation
}

// Where appends a list predicates to the BattleUpdate builder.
func (bu *BattleUpdate) Where(ps ...predicate.Battle) *BattleUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetResult sets the "result" field.
func (bu *BattleUpdate) SetResult(s string) *BattleUpdate {
	bu.mutation.SetResult(s)
	return bu
}

// SetUpdateAt sets the "update_at" field.
func (bu *BattleUpdate) SetUpdateAt(t time.Time) *BattleUpdate {
	bu.mutation.SetUpdateAt(t)
	return bu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (bu *BattleUpdate) SetNillableUpdateAt(t *time.Time) *BattleUpdate {
	if t != nil {
		bu.SetUpdateAt(*t)
	}
	return bu
}

// SetContenderID sets the "contender" edge to the Pokemon entity by ID.
func (bu *BattleUpdate) SetContenderID(id int) *BattleUpdate {
	bu.mutation.SetContenderID(id)
	return bu
}

// SetNillableContenderID sets the "contender" edge to the Pokemon entity by ID if the given value is not nil.
func (bu *BattleUpdate) SetNillableContenderID(id *int) *BattleUpdate {
	if id != nil {
		bu = bu.SetContenderID(*id)
	}
	return bu
}

// SetContender sets the "contender" edge to the Pokemon entity.
func (bu *BattleUpdate) SetContender(p *Pokemon) *BattleUpdate {
	return bu.SetContenderID(p.ID)
}

// SetOponentID sets the "oponent" edge to the Pokemon entity by ID.
func (bu *BattleUpdate) SetOponentID(id int) *BattleUpdate {
	bu.mutation.SetOponentID(id)
	return bu
}

// SetNillableOponentID sets the "oponent" edge to the Pokemon entity by ID if the given value is not nil.
func (bu *BattleUpdate) SetNillableOponentID(id *int) *BattleUpdate {
	if id != nil {
		bu = bu.SetOponentID(*id)
	}
	return bu
}

// SetOponent sets the "oponent" edge to the Pokemon entity.
func (bu *BattleUpdate) SetOponent(p *Pokemon) *BattleUpdate {
	return bu.SetOponentID(p.ID)
}

// Mutation returns the BattleMutation object of the builder.
func (bu *BattleUpdate) Mutation() *BattleMutation {
	return bu.mutation
}

// ClearContender clears the "contender" edge to the Pokemon entity.
func (bu *BattleUpdate) ClearContender() *BattleUpdate {
	bu.mutation.ClearContender()
	return bu
}

// ClearOponent clears the "oponent" edge to the Pokemon entity.
func (bu *BattleUpdate) ClearOponent() *BattleUpdate {
	bu.mutation.ClearOponent()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BattleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BattleUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BattleUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BattleUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BattleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battle.Table,
			Columns: battle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battle.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battle.FieldResult,
		})
	}
	if value, ok := bu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battle.FieldUpdateAt,
		})
	}
	if bu.mutation.ContenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.ContenderTable,
			Columns: []string{battle.ContenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ContenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.ContenderTable,
			Columns: []string{battle.ContenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.OponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.OponentTable,
			Columns: []string{battle.OponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.OponentTable,
			Columns: []string{battle.OponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BattleUpdateOne is the builder for updating a single Battle entity.
type BattleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BattleMutation
}

// SetResult sets the "result" field.
func (buo *BattleUpdateOne) SetResult(s string) *BattleUpdateOne {
	buo.mutation.SetResult(s)
	return buo
}

// SetUpdateAt sets the "update_at" field.
func (buo *BattleUpdateOne) SetUpdateAt(t time.Time) *BattleUpdateOne {
	buo.mutation.SetUpdateAt(t)
	return buo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (buo *BattleUpdateOne) SetNillableUpdateAt(t *time.Time) *BattleUpdateOne {
	if t != nil {
		buo.SetUpdateAt(*t)
	}
	return buo
}

// SetContenderID sets the "contender" edge to the Pokemon entity by ID.
func (buo *BattleUpdateOne) SetContenderID(id int) *BattleUpdateOne {
	buo.mutation.SetContenderID(id)
	return buo
}

// SetNillableContenderID sets the "contender" edge to the Pokemon entity by ID if the given value is not nil.
func (buo *BattleUpdateOne) SetNillableContenderID(id *int) *BattleUpdateOne {
	if id != nil {
		buo = buo.SetContenderID(*id)
	}
	return buo
}

// SetContender sets the "contender" edge to the Pokemon entity.
func (buo *BattleUpdateOne) SetContender(p *Pokemon) *BattleUpdateOne {
	return buo.SetContenderID(p.ID)
}

// SetOponentID sets the "oponent" edge to the Pokemon entity by ID.
func (buo *BattleUpdateOne) SetOponentID(id int) *BattleUpdateOne {
	buo.mutation.SetOponentID(id)
	return buo
}

// SetNillableOponentID sets the "oponent" edge to the Pokemon entity by ID if the given value is not nil.
func (buo *BattleUpdateOne) SetNillableOponentID(id *int) *BattleUpdateOne {
	if id != nil {
		buo = buo.SetOponentID(*id)
	}
	return buo
}

// SetOponent sets the "oponent" edge to the Pokemon entity.
func (buo *BattleUpdateOne) SetOponent(p *Pokemon) *BattleUpdateOne {
	return buo.SetOponentID(p.ID)
}

// Mutation returns the BattleMutation object of the builder.
func (buo *BattleUpdateOne) Mutation() *BattleMutation {
	return buo.mutation
}

// ClearContender clears the "contender" edge to the Pokemon entity.
func (buo *BattleUpdateOne) ClearContender() *BattleUpdateOne {
	buo.mutation.ClearContender()
	return buo
}

// ClearOponent clears the "oponent" edge to the Pokemon entity.
func (buo *BattleUpdateOne) ClearOponent() *BattleUpdateOne {
	buo.mutation.ClearOponent()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BattleUpdateOne) Select(field string, fields ...string) *BattleUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Battle entity.
func (buo *BattleUpdateOne) Save(ctx context.Context) (*Battle, error) {
	var (
		err  error
		node *Battle
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Battle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BattleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BattleUpdateOne) SaveX(ctx context.Context) *Battle {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BattleUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BattleUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BattleUpdateOne) sqlSave(ctx context.Context) (_node *Battle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battle.Table,
			Columns: battle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battle.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Battle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, battle.FieldID)
		for _, f := range fields {
			if !battle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != battle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battle.FieldResult,
		})
	}
	if value, ok := buo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battle.FieldUpdateAt,
		})
	}
	if buo.mutation.ContenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.ContenderTable,
			Columns: []string{battle.ContenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ContenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.ContenderTable,
			Columns: []string{battle.ContenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.OponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.OponentTable,
			Columns: []string{battle.OponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.OponentTable,
			Columns: []string{battle.OponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Battle{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
