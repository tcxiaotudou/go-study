// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-study/go-ent-pokemon/ent/battle"
	"go-study/go-ent-pokemon/ent/pokemon"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BattleCreate is the builder for creating a Battle entity.
type BattleCreate struct {
	config
	mutation *BattleMutation
	hooks    []Hook
}

// SetResult sets the "result" field.
func (bc *BattleCreate) SetResult(s string) *BattleCreate {
	bc.mutation.SetResult(s)
	return bc
}

// SetCreateAt sets the "create_at" field.
func (bc *BattleCreate) SetCreateAt(t time.Time) *BattleCreate {
	bc.mutation.SetCreateAt(t)
	return bc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (bc *BattleCreate) SetNillableCreateAt(t *time.Time) *BattleCreate {
	if t != nil {
		bc.SetCreateAt(*t)
	}
	return bc
}

// SetUpdateAt sets the "update_at" field.
func (bc *BattleCreate) SetUpdateAt(t time.Time) *BattleCreate {
	bc.mutation.SetUpdateAt(t)
	return bc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (bc *BattleCreate) SetNillableUpdateAt(t *time.Time) *BattleCreate {
	if t != nil {
		bc.SetUpdateAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BattleCreate) SetID(i int) *BattleCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetContenderID sets the "contender" edge to the Pokemon entity by ID.
func (bc *BattleCreate) SetContenderID(id int) *BattleCreate {
	bc.mutation.SetContenderID(id)
	return bc
}

// SetNillableContenderID sets the "contender" edge to the Pokemon entity by ID if the given value is not nil.
func (bc *BattleCreate) SetNillableContenderID(id *int) *BattleCreate {
	if id != nil {
		bc = bc.SetContenderID(*id)
	}
	return bc
}

// SetContender sets the "contender" edge to the Pokemon entity.
func (bc *BattleCreate) SetContender(p *Pokemon) *BattleCreate {
	return bc.SetContenderID(p.ID)
}

// SetOponentID sets the "oponent" edge to the Pokemon entity by ID.
func (bc *BattleCreate) SetOponentID(id int) *BattleCreate {
	bc.mutation.SetOponentID(id)
	return bc
}

// SetNillableOponentID sets the "oponent" edge to the Pokemon entity by ID if the given value is not nil.
func (bc *BattleCreate) SetNillableOponentID(id *int) *BattleCreate {
	if id != nil {
		bc = bc.SetOponentID(*id)
	}
	return bc
}

// SetOponent sets the "oponent" edge to the Pokemon entity.
func (bc *BattleCreate) SetOponent(p *Pokemon) *BattleCreate {
	return bc.SetOponentID(p.ID)
}

// Mutation returns the BattleMutation object of the builder.
func (bc *BattleCreate) Mutation() *BattleMutation {
	return bc.mutation
}

// Save creates the Battle in the database.
func (bc *BattleCreate) Save(ctx context.Context) (*Battle, error) {
	var (
		err  error
		node *Battle
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BattleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Battle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BattleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BattleCreate) SaveX(ctx context.Context) *Battle {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BattleCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BattleCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BattleCreate) defaults() {
	if _, ok := bc.mutation.CreateAt(); !ok {
		v := battle.DefaultCreateAt()
		bc.mutation.SetCreateAt(v)
	}
	if _, ok := bc.mutation.UpdateAt(); !ok {
		v := battle.DefaultUpdateAt()
		bc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BattleCreate) check() error {
	if _, ok := bc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "Battle.result"`)}
	}
	if _, ok := bc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Battle.create_at"`)}
	}
	if _, ok := bc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Battle.update_at"`)}
	}
	return nil
}

func (bc *BattleCreate) sqlSave(ctx context.Context) (*Battle, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (bc *BattleCreate) createSpec() (*Battle, *sqlgraph.CreateSpec) {
	var (
		_node = &Battle{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: battle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: battle.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Result(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battle.FieldResult,
		})
		_node.Result = value
	}
	if value, ok := bc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battle.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := bc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battle.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := bc.mutation.ContenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.ContenderTable,
			Columns: []string{battle.ContenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pokemon_fights = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.OponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battle.OponentTable,
			Columns: []string{battle.OponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pokemon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pokemon_opponents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BattleCreateBulk is the builder for creating many Battle entities in bulk.
type BattleCreateBulk struct {
	config
	builders []*BattleCreate
}

// Save creates the Battle entities in the database.
func (bcb *BattleCreateBulk) Save(ctx context.Context) ([]*Battle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Battle, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BattleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BattleCreateBulk) SaveX(ctx context.Context) []*Battle {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BattleCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BattleCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
