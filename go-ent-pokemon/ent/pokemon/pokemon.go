// Code generated by ent, DO NOT EDIT.

package pokemon

import (
	"time"
)

const (
	// Label holds the string label denoting the pokemon type in the database.
	Label = "pokemon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeFights holds the string denoting the fights edge name in mutations.
	EdgeFights = "fights"
	// EdgeOpponents holds the string denoting the opponents edge name in mutations.
	EdgeOpponents = "opponents"
	// Table holds the table name of the pokemon in the database.
	Table = "pokemons"
	// FightsTable is the table that holds the fights relation/edge.
	FightsTable = "battles"
	// FightsInverseTable is the table name for the Battle entity.
	// It exists in this package in order to avoid circular dependency with the "battle" package.
	FightsInverseTable = "battles"
	// FightsColumn is the table column denoting the fights relation/edge.
	FightsColumn = "pokemon_fights"
	// OpponentsTable is the table that holds the opponents relation/edge.
	OpponentsTable = "battles"
	// OpponentsInverseTable is the table name for the Battle entity.
	// It exists in this package in order to avoid circular dependency with the "battle" package.
	OpponentsInverseTable = "battles"
	// OpponentsColumn is the table column denoting the opponents relation/edge.
	OpponentsColumn = "pokemon_opponents"
)

// Columns holds all SQL columns for pokemon fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldWeight,
	FieldHeight,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
)
