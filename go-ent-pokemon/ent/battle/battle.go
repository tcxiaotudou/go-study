// Code generated by ent, DO NOT EDIT.

package battle

import (
	"time"
)

const (
	// Label holds the string label denoting the battle type in the database.
	Label = "battle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeContender holds the string denoting the contender edge name in mutations.
	EdgeContender = "contender"
	// EdgeOponent holds the string denoting the oponent edge name in mutations.
	EdgeOponent = "oponent"
	// Table holds the table name of the battle in the database.
	Table = "battles"
	// ContenderTable is the table that holds the contender relation/edge.
	ContenderTable = "battles"
	// ContenderInverseTable is the table name for the Pokemon entity.
	// It exists in this package in order to avoid circular dependency with the "pokemon" package.
	ContenderInverseTable = "pokemons"
	// ContenderColumn is the table column denoting the contender relation/edge.
	ContenderColumn = "pokemon_fights"
	// OponentTable is the table that holds the oponent relation/edge.
	OponentTable = "battles"
	// OponentInverseTable is the table name for the Pokemon entity.
	// It exists in this package in order to avoid circular dependency with the "pokemon" package.
	OponentInverseTable = "pokemons"
	// OponentColumn is the table column denoting the oponent relation/edge.
	OponentColumn = "pokemon_opponents"
)

// Columns holds all SQL columns for battle fields.
var Columns = []string{
	FieldID,
	FieldResult,
	FieldCreateAt,
	FieldUpdateAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "battles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"pokemon_fights",
	"pokemon_opponents",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
)
