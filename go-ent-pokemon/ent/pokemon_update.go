// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-study/go-ent-pokemon/ent/battle"
	"go-study/go-ent-pokemon/ent/pokemon"
	"go-study/go-ent-pokemon/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PokemonUpdate is the builder for updating Pokemon entities.
type PokemonUpdate struct {
	config
	hooks    []Hook
	mutation *PokemonMutation
}

// Where appends a list predicates to the PokemonUpdate builder.
func (pu *PokemonUpdate) Where(ps ...predicate.Pokemon) *PokemonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PokemonUpdate) SetName(s string) *PokemonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PokemonUpdate) SetDescription(s string) *PokemonUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PokemonUpdate) SetWeight(f float64) *PokemonUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *PokemonUpdate) AddWeight(f float64) *PokemonUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// SetHeight sets the "height" field.
func (pu *PokemonUpdate) SetHeight(f float64) *PokemonUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(f)
	return pu
}

// AddHeight adds f to the "height" field.
func (pu *PokemonUpdate) AddHeight(f float64) *PokemonUpdate {
	pu.mutation.AddHeight(f)
	return pu
}

// SetUpdateAt sets the "update_at" field.
func (pu *PokemonUpdate) SetUpdateAt(t time.Time) *PokemonUpdate {
	pu.mutation.SetUpdateAt(t)
	return pu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (pu *PokemonUpdate) SetNillableUpdateAt(t *time.Time) *PokemonUpdate {
	if t != nil {
		pu.SetUpdateAt(*t)
	}
	return pu
}

// AddFightIDs adds the "fights" edge to the Battle entity by IDs.
func (pu *PokemonUpdate) AddFightIDs(ids ...int) *PokemonUpdate {
	pu.mutation.AddFightIDs(ids...)
	return pu
}

// AddFights adds the "fights" edges to the Battle entity.
func (pu *PokemonUpdate) AddFights(b ...*Battle) *PokemonUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddFightIDs(ids...)
}

// AddOpponentIDs adds the "opponents" edge to the Battle entity by IDs.
func (pu *PokemonUpdate) AddOpponentIDs(ids ...int) *PokemonUpdate {
	pu.mutation.AddOpponentIDs(ids...)
	return pu
}

// AddOpponents adds the "opponents" edges to the Battle entity.
func (pu *PokemonUpdate) AddOpponents(b ...*Battle) *PokemonUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddOpponentIDs(ids...)
}

// Mutation returns the PokemonMutation object of the builder.
func (pu *PokemonUpdate) Mutation() *PokemonMutation {
	return pu.mutation
}

// ClearFights clears all "fights" edges to the Battle entity.
func (pu *PokemonUpdate) ClearFights() *PokemonUpdate {
	pu.mutation.ClearFights()
	return pu
}

// RemoveFightIDs removes the "fights" edge to Battle entities by IDs.
func (pu *PokemonUpdate) RemoveFightIDs(ids ...int) *PokemonUpdate {
	pu.mutation.RemoveFightIDs(ids...)
	return pu
}

// RemoveFights removes "fights" edges to Battle entities.
func (pu *PokemonUpdate) RemoveFights(b ...*Battle) *PokemonUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveFightIDs(ids...)
}

// ClearOpponents clears all "opponents" edges to the Battle entity.
func (pu *PokemonUpdate) ClearOpponents() *PokemonUpdate {
	pu.mutation.ClearOpponents()
	return pu
}

// RemoveOpponentIDs removes the "opponents" edge to Battle entities by IDs.
func (pu *PokemonUpdate) RemoveOpponentIDs(ids ...int) *PokemonUpdate {
	pu.mutation.RemoveOpponentIDs(ids...)
	return pu
}

// RemoveOpponents removes "opponents" edges to Battle entities.
func (pu *PokemonUpdate) RemoveOpponents(b ...*Battle) *PokemonUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveOpponentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PokemonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PokemonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PokemonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PokemonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PokemonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PokemonUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := pokemon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pokemon.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := pokemon.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Pokemon.description": %w`, err)}
		}
	}
	return nil
}

func (pu *PokemonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pokemon.Table,
			Columns: pokemon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pokemon.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemon.FieldName,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemon.FieldDescription,
		})
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldWeight,
		})
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldWeight,
		})
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldHeight,
		})
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldHeight,
		})
	}
	if value, ok := pu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pokemon.FieldUpdateAt,
		})
	}
	if pu.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFightsIDs(); len(nodes) > 0 && !pu.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OpponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOpponentsIDs(); len(nodes) > 0 && !pu.mutation.OpponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OpponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pokemon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PokemonUpdateOne is the builder for updating a single Pokemon entity.
type PokemonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PokemonMutation
}

// SetName sets the "name" field.
func (puo *PokemonUpdateOne) SetName(s string) *PokemonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PokemonUpdateOne) SetDescription(s string) *PokemonUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PokemonUpdateOne) SetWeight(f float64) *PokemonUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *PokemonUpdateOne) AddWeight(f float64) *PokemonUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// SetHeight sets the "height" field.
func (puo *PokemonUpdateOne) SetHeight(f float64) *PokemonUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(f)
	return puo
}

// AddHeight adds f to the "height" field.
func (puo *PokemonUpdateOne) AddHeight(f float64) *PokemonUpdateOne {
	puo.mutation.AddHeight(f)
	return puo
}

// SetUpdateAt sets the "update_at" field.
func (puo *PokemonUpdateOne) SetUpdateAt(t time.Time) *PokemonUpdateOne {
	puo.mutation.SetUpdateAt(t)
	return puo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (puo *PokemonUpdateOne) SetNillableUpdateAt(t *time.Time) *PokemonUpdateOne {
	if t != nil {
		puo.SetUpdateAt(*t)
	}
	return puo
}

// AddFightIDs adds the "fights" edge to the Battle entity by IDs.
func (puo *PokemonUpdateOne) AddFightIDs(ids ...int) *PokemonUpdateOne {
	puo.mutation.AddFightIDs(ids...)
	return puo
}

// AddFights adds the "fights" edges to the Battle entity.
func (puo *PokemonUpdateOne) AddFights(b ...*Battle) *PokemonUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddFightIDs(ids...)
}

// AddOpponentIDs adds the "opponents" edge to the Battle entity by IDs.
func (puo *PokemonUpdateOne) AddOpponentIDs(ids ...int) *PokemonUpdateOne {
	puo.mutation.AddOpponentIDs(ids...)
	return puo
}

// AddOpponents adds the "opponents" edges to the Battle entity.
func (puo *PokemonUpdateOne) AddOpponents(b ...*Battle) *PokemonUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddOpponentIDs(ids...)
}

// Mutation returns the PokemonMutation object of the builder.
func (puo *PokemonUpdateOne) Mutation() *PokemonMutation {
	return puo.mutation
}

// ClearFights clears all "fights" edges to the Battle entity.
func (puo *PokemonUpdateOne) ClearFights() *PokemonUpdateOne {
	puo.mutation.ClearFights()
	return puo
}

// RemoveFightIDs removes the "fights" edge to Battle entities by IDs.
func (puo *PokemonUpdateOne) RemoveFightIDs(ids ...int) *PokemonUpdateOne {
	puo.mutation.RemoveFightIDs(ids...)
	return puo
}

// RemoveFights removes "fights" edges to Battle entities.
func (puo *PokemonUpdateOne) RemoveFights(b ...*Battle) *PokemonUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveFightIDs(ids...)
}

// ClearOpponents clears all "opponents" edges to the Battle entity.
func (puo *PokemonUpdateOne) ClearOpponents() *PokemonUpdateOne {
	puo.mutation.ClearOpponents()
	return puo
}

// RemoveOpponentIDs removes the "opponents" edge to Battle entities by IDs.
func (puo *PokemonUpdateOne) RemoveOpponentIDs(ids ...int) *PokemonUpdateOne {
	puo.mutation.RemoveOpponentIDs(ids...)
	return puo
}

// RemoveOpponents removes "opponents" edges to Battle entities.
func (puo *PokemonUpdateOne) RemoveOpponents(b ...*Battle) *PokemonUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveOpponentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PokemonUpdateOne) Select(field string, fields ...string) *PokemonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pokemon entity.
func (puo *PokemonUpdateOne) Save(ctx context.Context) (*Pokemon, error) {
	var (
		err  error
		node *Pokemon
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PokemonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Pokemon)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PokemonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PokemonUpdateOne) SaveX(ctx context.Context) *Pokemon {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PokemonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PokemonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PokemonUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := pokemon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pokemon.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := pokemon.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Pokemon.description": %w`, err)}
		}
	}
	return nil
}

func (puo *PokemonUpdateOne) sqlSave(ctx context.Context) (_node *Pokemon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pokemon.Table,
			Columns: pokemon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pokemon.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pokemon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pokemon.FieldID)
		for _, f := range fields {
			if !pokemon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pokemon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemon.FieldName,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pokemon.FieldDescription,
		})
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldWeight,
		})
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldWeight,
		})
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldHeight,
		})
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pokemon.FieldHeight,
		})
	}
	if value, ok := puo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pokemon.FieldUpdateAt,
		})
	}
	if puo.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFightsIDs(); len(nodes) > 0 && !puo.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.FightsTable,
			Columns: []string{pokemon.FightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OpponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOpponentsIDs(); len(nodes) > 0 && !puo.mutation.OpponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OpponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pokemon.OpponentsTable,
			Columns: []string{pokemon.OpponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: battle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pokemon{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pokemon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
